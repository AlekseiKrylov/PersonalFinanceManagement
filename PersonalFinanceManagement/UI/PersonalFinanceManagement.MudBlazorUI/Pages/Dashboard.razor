@page "/dashboard"
@inherits DashboardViewModel

<MudContainer Class="mt-2 px-2" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSelect T="WalletDTO" ValueChanged="OnWalletChangedAsync" Value="SelectedWallet" Label="Wallet" Variant="Variant.Outlined"
                       AdornmentIcon="@Icons.Material.Outlined.Wallet" AdornmentColor="Color.Primary">
                @foreach (var selectItem in _wallets)
                {
                    <MudSelectItem Value="@selectItem" />
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudStack Spacing="2" Row="true">
                <MudDateRangePicker Variant="Variant.Outlined" Disabled="@(SelectedWallet is null)" @bind-DateRange="_dateRange" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(SelectedWallet is null)" OnClick="ConfirmPeriodAsync">Ok</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <SumPlate LoadingData="_loadData" Name="Change for the period" Amount="@(_reportIncome - _reportExpenses)"
                      IsIncome="@((_reportIncome - _reportExpenses) == 0 ? null : (_reportIncome - _reportExpenses) > 0 ? true : false)" />
        </MudItem>
        <MudItem xs="6" sm="3" md="4">
            <SumPlate Name="Income" Amount="_reportIncome" IsIncome="true" LoadingData="_loadData" />
        </MudItem>
        <MudItem xs="6" sm="3" md="4">
            <SumPlate Name="Expenses" Amount="_reportExpenses" IsIncome="false" LoadingData="_loadData" />
        </MudItem>
        <MudItem xs="12">
            @if (_addTransaction)
            {
                <MudButton Disabled="@(SelectedWallet is null)" Variant="Variant.Filled" Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Warning"
                           OnClick="AddTransactionToggle">Cancel</MudButton>
            }
            else
            {
                <MudButton Disabled="@(SelectedWallet is null)" Variant="Variant.Filled" Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.AddCircle" IconColor="Color.Success"
                           OnClick="AddTransactionToggle">Add transaction</MudButton>
            }
        </MudItem>
        <MudItem xs="12" hidden="@(!_addTransaction)">
            <AddTransaction Categories="_categories.ToList()" TransactionCreateForm="_transactionCreateForm" CreateTransactionAsync="CreateTransactionAsync" />
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudTable Items="@_transactions" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loadData" LoadingProgressColor="Color.Info" SortLabel="Sort By">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<TransactionWithCategory, object>(x => x.Date)">Date</MudTableSortLabel></MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Note</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Category</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.Date.ToString("d", culture)</MudTd>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Note">@context.Note</MudTd>
                    <MudTd DataLabel="Amount" Style="text-align:right">
                        @(context.CategoryIsIncome
                            ? context.Amount.ToString("0,0.00", culture)
                            : $"- {context.Amount.ToString("0,0.00", culture)}")
                    </MudTd>
                    <MudTd>@context.CategoryName</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool _loadData = false;
    private bool _addTransaction = false;
    public CultureInfo culture = CultureInfo.CurrentCulture ?? CultureInfo.InvariantCulture;
    private DateRange _dateRange = new()
        {
            Start = new(DateTime.Now.Year, DateTime.Now.Month, 1),
            End = DateTime.Now.AddMonths(1).AddDays(-1).Date
        };

    private WalletDTO SelectedWallet { get; set; }
    private CreateTransactionForm _transactionCreateForm = new();

    private void AddTransactionToggle()
    {
        _addTransaction = !_addTransaction;
        ClearCreateForm();
    }

    private async Task OnWalletChangedAsync(WalletDTO wallet)
    {
        SelectedWallet = wallet;
        await ConfirmPeriodAsync();
        await GetCatigoriesInWallet(wallet.Id);
    }

    private async Task ConfirmPeriodAsync()
    {
        _loadData = true;

        if (_dateRange.Start is not null && _dateRange.End is not null)
        {
            await GetPeriodReportAsync(SelectedWallet.Id, (DateTime)_dateRange.Start, (DateTime)_dateRange.End);
        }

        _loadData = false;
    }

    private async Task CreateTransactionAsync()
    {
        var newTransaction = new TransactionCreateDTO
            {
                CategoryId = _transactionCreateForm.Category.Id,
                Name = _transactionCreateForm.Name,
                Note = _transactionCreateForm.Note,
                Date = (DateTime)_transactionCreateForm.Date!,
                Amount = (decimal)_transactionCreateForm.Amount!
            };

        await AddTransactionAsync(newTransaction);

        if (newTransaction.Date >= _dateRange.Start && newTransaction.Date.Date <= _dateRange.End)
        {
            await GetPeriodReportAsync(SelectedWallet.Id, (DateTime)_dateRange.Start, (DateTime)_dateRange.End);
        }
        ClearCreateForm();
    }

    private void ClearCreateForm() => _transactionCreateForm = new();
}