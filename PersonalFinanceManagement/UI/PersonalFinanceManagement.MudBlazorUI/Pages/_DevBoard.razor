@page "/devboard"
@using PersonalFinanceManagement.MudBlazorUI.Shared.Dialogs;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@* <TestTable TestTransactions="_testTransactions" OnTransactionDeleted="HandleTransactionDeleted" /> *@

@* <MudItem xs="12" sm="12">
    <TransactionsTable Categories="_categories" Transactions="_transactions" OnDeleteTransaction="HandleTransactionDeleted" />
</MudItem> *@

@* <CategoriesDropdown Categories="_categories" SelectedCategory="_selectedCategory" SelectedCategoryChanged="HandleSelectedCategoryChanged" /> *@
@* <CategoriesDropdown Categories="_categories" @bind-SelectedCategory="_selectedCategory" />
@if (_selectedCategory is not null)
{
    <br />
    <MudAlert Severity="Severity.Info">@(_selectedCategory.Name) was selected</MudAlert>
} *@

<MudGrid>
    <MudItem xs="12">
        <MudGrid Spacing="1" Justify="Justify.Center">
            @foreach (var wallet in _wallets)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" Class="d-flex flex-column align-center justify-center mud-width-full">
                    <MudButton FullWidth="true" OnClick="async() => await LoadCategoriesAsync(wallet.Id)">
                        <WalletCard Wallet="wallet" OnDelete="DeleteWallet" OnUpdate="UpdateWallet" />
                    </MudButton>
                    <MudElement>
                        @if (_selectedWallet is null || _selectedWallet.Id != wallet.Id)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.ArrowDropUp" Color="Color.Default" Size="Size.Medium" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.ArrowDropUp" Color="Color.Success" Size="Size.Large" />
                        }
                    </MudElement>
                </MudItem>
            }
            @if (_wallets.Count < 4)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" Class="d-flex flex-column align-center justify-center mud-width-full py-2">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="async() => await CreateWallet()" />
                </MudItem>
            }
        </MudGrid>
    </MudItem>
    <MudItem xs="12">
        @if (_addCategory)
        {
            <MudButton Disabled="@(_selectedWallet is null)" Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Warning"
                       OnClick="AddCategoryToggle">Cancel</MudButton>
        }
        else
        {
            <MudButton Disabled="@(_selectedWallet is null)" Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.AddCircle" IconColor="Color.Success"
                       OnClick="AddCategoryToggle">Add category</MudButton>
        }
    </MudItem>
    <MudItem xs="12" hidden="@(!_addCategory)">
        <MudForm @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Name" Variant="Variant.Outlined" Counter="50" MaxLength="50" Immediate="true"
                                  Required="true" RequiredError="Name is required!"
                    @bind-Value="_categoryCreateForm.Name" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudCheckBox @bind-Checked="_categoryCreateForm.IsIncome" Color="Color.Primary">Income</MudCheckBox>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               Disabled="@(!success || string.IsNullOrWhiteSpace(_categoryCreateForm.Name))" Class="my-1"
                               OnClick="CreateCategoryAsync">Create</MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudItem>
    <MudItem xs="12" Class="mud-width-full">
        <MudDataGrid Items="_categories" Dense="true" Groupable="true" GroupExpanded="true" Loading="true" ColumnResizeMode="ResizeMode.None">
            <Columns>
                <TemplateColumn Resizable="false" CellStyle="width:100px;">
                    <CellTemplate>
                        <MudStack Row="true">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                           OnClick="async() => await UpdateCategoryAsync(context.Item)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                                           OnClick="async() => await DeleteCategoryAsync(context.Item)" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="с => с.Name" Grouping GroupBy="_groupBy" Resizable="false">
                     <GroupTemplate>
                         <span style="font-weight:bold">@(context.Grouping.Key is true ? "Income" : "Expense")</span>
                    </GroupTemplate>
                </PropertyColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="CategoryDTO" />
            </PagerContent>
        </MudDataGrid>
    </MudItem>
</MudGrid>


@code {
    private bool _addCategory = false;
    private bool success;
    private List<WalletDTO> _wallets;
    private List<TestTransaction> _testTransactions;
    private List<TransactionWithCategory> _transactions;
    private List<CategoryDTO> _categories = new();
    private WalletDTO _newWallet;
    private WalletDTO _selectedWallet;
    private CategoryCreateDTO _categoryCreateForm = new();
    private TransactionWithCategory? _selectedTransaction = null;
    private CategoryDTO _selectedCategory;
    Func<CategoryDTO, object> _groupBy = x => x.IsIncome;

    protected override void OnInitialized()
    {
        _wallets = new()
        {
            new WalletDTO { Id=1, Name="Name_wallet_1", Description="Description_wallet_1", UserId = 1 },
            new WalletDTO { Id=2, Name="Name_wallet_2", Description="Description_wallet_2", UserId = 1 },
            new WalletDTO { Id=3, Name="Name_wallet_3", Description="Description_wallet_3", UserId = 1 },
            //new WalletDTO { Id=4, Name="Name_wallet_4", Description="Description_wallet_4", UserId = 1 },
            //new WalletDTO { Id=5, Name="Name_wallet_5", Description="Description_wallet_5", UserId = 1 },
        };

        _categories = new()
    {
    new CategoryDTO { Id=1, Name="Test_category_name_1", IsIncome=true, WalletId=1 },
    new CategoryDTO { Id=2, Name="Test_category_name_2", IsIncome=true, WalletId=1 },
    new CategoryDTO { Id=3, Name="Test_category_name_3", IsIncome=true, WalletId=1 },
    new CategoryDTO { Id=4, Name="Test_category_name_4", IsIncome=true, WalletId=1 },
    new CategoryDTO { Id=5, Name="Test_category_name_12", IsIncome=true, WalletId=1 },
    new CategoryDTO { Id=6, Name="Test_category_name_5", IsIncome=false, WalletId=1 },
    new CategoryDTO { Id=7, Name="Test_category_name_6", IsIncome=false, WalletId=1 },
    new CategoryDTO { Id=8, Name="Test_category_name_7", IsIncome=false, WalletId=1 },
    new CategoryDTO { Id=9, Name="Test_category_name_8", IsIncome=false, WalletId=1 },
    new CategoryDTO { Id=10, Name="Test_category_name_9", IsIncome=false, WalletId=1 },
    new CategoryDTO { Id=11, Name="Test_category_name_10", IsIncome=false, WalletId=1 },
    new CategoryDTO { Id=12, Name="Test_category_name_11", IsIncome=false, WalletId=1 },
    };

        _transactions = new()
    {
    new TransactionWithCategory { Id=1, Date=DateTime.Today, Amount=150000, Name="Test_name_1", Note="Test_note_1", Category=_categories[0] },
    new TransactionWithCategory { Id=2, Date=DateTime.Today, Amount=1000, Name="Test_name_2", Note="Test_note_2", Category=_categories[1] },
    new TransactionWithCategory { Id=3, Date=DateTime.Today, Amount=1000, Name="Test_name_3", Note="Test_note_3", Category=_categories[1] },
    new TransactionWithCategory { Id=4, Date=DateTime.Today, Amount=105000, Name="Test_name_4", Note="Test_note_4", Category=_categories[0] },
    new TransactionWithCategory { Id=5, Date=DateTime.Today.AddDays(-1), Amount=10000, Name="Test_name_5", Note="Test_note_5", Category=_categories[0] },
    new TransactionWithCategory { Id=6, Date=DateTime.Today.AddDays(-1), Amount=1000, Name="Test_name_6", Note="Test_note_6", Category=_categories[0] },
    new TransactionWithCategory { Id=7, Date=DateTime.Today.AddDays(-4), Amount=11000, Name="Test_name_7", Note="Test_note_7", Category=_categories[1] },
    new TransactionWithCategory { Id=8, Date=DateTime.Today.AddDays(-4), Amount=12000, Name="Test_name_8", Note="Test_note_8", Category=_categories[0] },
    new TransactionWithCategory { Id=9, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=10, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=11, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=12, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=13, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=14, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=15, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=16, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=17, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=18, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=19, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=20, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=21, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=22, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    new TransactionWithCategory { Id=23, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
    //new TransactionWithCategory { Id=10, Date=DateTime.Today.AddDays(-25), Amount=1001, Name="Test Test TestTestTest (50 chars include) testtest", Note="Test Test Test TestTest (1000 chars include) test test-test test-test/test test test-test testtest test-test test-test/test test test-test test-test/test test test-test test-test/test test test-test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/testtesttest test-test test-test/test testtest test-test test-test/testtesttest test-test test-test/testtesttest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-testtest", Category=_categories[1] },
    };

        _testTransactions = new()
        {
            new TestTransaction { Id = 1, Date = DateTime.Now.Date, Amount = 100.00M },
            new TestTransaction { Id = 2, Date = DateTime.Now.Date.AddDays(-1), Amount = 50.00M }
        };



        base.OnInitialized();
    }

    private void AddCategoryToggle()
    {
        _addCategory = !_addCategory;
        ClearCategoryCreateForm();
    }

    private void ClearCategoryCreateForm()
    {
        _categoryCreateForm = new();
        success = false;
    }

    private async Task CreateCategoryAsync()
    {
        var newCategory = new CategoryDTO()
            {
                Id = _categories.Count > 0 ? _categories.Max(item => item.Id) + 1 : 1,
                Name = _categoryCreateForm.Name,
                IsIncome = _categoryCreateForm.IsIncome,
                WalletId = _selectedWallet.Id
            };

        _categories.Add(newCategory);

        ClearCategoryCreateForm();
    }

    private async Task DeleteCategoryAsync(CategoryDTO category)
    {
        var parameters = new DialogParameters<SimpleTwoButtonsDialog>();
        parameters.Add(d => d.ContentText, $"Are you sure you want to delete transaction '{category.Name}'?");
        parameters.Add(d => d.ButtonText, "Delete");
        parameters.Add(d => d.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<SimpleTwoButtonsDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        _categories.Remove(category);
    }

    private async Task UpdateCategoryAsync(CategoryDTO category)
    {
        var editableCategory = new CategoryDTO()
            {
                Id = category.Id,
                Name = category.Name,
                IsIncome = category.IsIncome,
                WalletId = _selectedWallet.Id
            };

        var parameters = new DialogParameters<EditCategoryDialog>();
        parameters.Add(d => d.Category, editableCategory);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<EditCategoryDialog>("Edit", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        int index = _categories.FindIndex(item => item.Id == category.Id);
        if (index != -1)
            _categories[index] = editableCategory;
    }

    private async Task LoadCategoriesAsync(int id)
    {
        _selectedWallet = _wallets.Find(w => w.Id == id) ?? new();
        switch (id)
        {
            case 1:
                _categories = new()
            {
                new CategoryDTO { Id=1, Name="Test_category_name_1", IsIncome=true, WalletId=1 },
                new CategoryDTO { Id=12, Name="Test_category_name_2", IsIncome=false, WalletId=1 },
            };
                break;
            case 2:
                _categories = new()
            {
                new CategoryDTO { Id=1, Name="Test_category_name_3", IsIncome=true, WalletId=1 },
                new CategoryDTO { Id=12, Name="Test_category_name_4", IsIncome=false, WalletId=1 },
            };
                break;
            default:
                _categories = new();
                break;
        }
    }

    private async Task DeleteWallet(WalletDTO wallet)
    {
        _wallets.Remove(wallet);
    }

    private async Task UpdateWallet(WalletDTO wallet)
    {
        int index = _wallets.FindIndex(item => item.Id == wallet.Id);
        if (index != -1)
            _wallets[index] = wallet;
    }

    private async Task CreateWallet()
    {
        _newWallet = new();

        var parameters = new DialogParameters<AddEditWalletDialog>();
        parameters.Add(d => d.Wallet, _newWallet);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<AddEditWalletDialog>("Add", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        _newWallet.Id = _wallets.Count > 0 ? _wallets.Max(item => item.Id) + 1 : 1;
        _wallets.Add(_newWallet);
    }

    private async Task HandleTransactionDeleted(TransactionWithCategory deletedTransaction)
    {
        Snackbar.Add($"Called from DevBoard {DateTime.Now}", Severity.Error);
        _transactions.Remove(deletedTransaction);

        // var parameters = new DialogParameters<SimpleTwoButtonsDialog>();
        // parameters.Add(d => d.ContentText, $"Are you sure you want to delete transaction '{deletedTransaction.Id}'?");
        // parameters.Add(d => d.ButtonText, "Delete");
        // parameters.Add(d => d.Color, Color.Error);

        // var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        // var dialog = DialogService.Show<SimpleTwoButtonsDialog>("Delete", parameters, options);
        // var result = await dialog.Result;
        // if (!result.Cancelled)
        // {
        //     _testTransactions.Remove(deletedTransaction);
        //     Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        //     Snackbar.Add($"The transaction '{deletedTransaction.Id}' was deleted", Severity.Success);
        //     //StateHasChanged();
        // }
        // else
        //     Snackbar.Add("Deletion was canceled", Severity.Info);
    }

    public class TestTransaction
    {
        public int Id { get; set; }
        public DateTime? Date { get; set; }
        public decimal Amount { get; set; }
    }
}
