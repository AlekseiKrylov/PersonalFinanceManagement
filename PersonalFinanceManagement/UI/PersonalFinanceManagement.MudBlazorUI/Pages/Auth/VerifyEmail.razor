@page "/verify"
@inherits VerifyEmailViewModel
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12">
        <MudCard>
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudCardContent>
                    <MudTextField T="string" @bind-Value="_emailVerificationCode" Label="Enter the verification code" 
                                  Required="true" RequiredError="Verification code is required!" OnlyValidateIfDirty="false" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="ml-auto" OnClick="HandleEmailVerificationAsync">Verify</MudButton>
                </MudCardActions>
            </MudForm>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" Href="/login">Login</MudButton>
    </MudItem>
</MudGrid>

@code {
    bool _success;
    MudForm _form;

    private async Task HandleEmailVerificationAsync()
    {
        var response = await EmailVerificationAsync();

        switch (response.Status)
        {
            case ApiResultStatus.Success:
                Snackbar.Add(response.Value, Severity.Success);
                break;
            case ApiResultStatus.Failure:
                Snackbar.Add(response.GetErrorString, Severity.Warning);
                break;
            case ApiResultStatus.Partial:
                Snackbar.Add(response.GetErrorString, Severity.Info);
                break;
        }
    }
}