@page "/reset"
@inherits ResetPasswordViewModel

<ApiMessageHandler ApiResponse="_apiResponse" SuccessMessage="_successMessage" />
<EditForm Model="@_resetReqestModel" OnValidSubmit="HandleResetAsync">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Reset password code" Class="mt-3"
                    @bind-Value="_resetReqestModel.ResetPasswordToken" For="@(() => _resetReqestModel.ResetPasswordToken)" />
                    <MudTextField Label="Email" Class="mt-3"
                    @bind-Value="_resetReqestModel.Email" For="@(() => _resetReqestModel.Email)" />
                    <MudTextField Label="Password" Class="mt-3"
                    @bind-Value="_resetReqestModel.Password" For="@(() => _resetReqestModel.Password)" InputType="PasswordInput"
                                  Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowHidePassword" AdornmentAriaLabel="Show Password" />
                    <MudTextField Label="Confirm password" Class="mt-3"
                    @bind-Value="_resetReqestModel.ConfirmPassword" For="@(() => _resetReqestModel.ConfirmPassword)" InputType="PasswordInput"
                                  Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowHidePassword" AdornmentAriaLabel="Show Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Reset password</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Href="/login">Login</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private IApiResult _apiResponse;
    private string _successMessage;

    void ShowHidePassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task HandleResetAsync()
    {
        var response = await ResetAsync();

        _apiResponse = response;
        _successMessage = response.Value;
    }
}
