<MudTable Items="Transactions" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm"
          Loading="_loadingData" LoadingProgressColor="Color.Info" SortLabel="Sort By"
          GroupBy="_groupDefinition" GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          CanCancelEdit="true" @bind-SelectedItem="_selectedTransaction"
          EditButtonPosition="TableEditButtonPosition.Start" EditTrigger="TableEditTrigger.EditButton"
          ApplyButtonPosition="TableApplyButtonPosition.Start"
          RowEditPreview="BackupTransaction" RowEditCancel="ResetTransactionToBackupValues" Bordered="false">
    <ColGroup>
        <col style="width:100px;" />
        <col style="width:12%;" />
        <col style="width:12%;" />
        <col style="width:12%;" />
        <col style="width:15%;" />
        <col style="width:0%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh Style="text-align:right">Amount</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Note</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="6">@(((DateTime)context.Key).ToString("d", Culture))</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Amount" Style="text-align:right">
            <MudText Typo="Typo.inherit" Color="@(context.Category.IsIncome ? Color.Success : Color.Error)">
                @(context.Category.IsIncome
                ? context.Amount.ToString("0,0.00", Culture)
                : $"- {context.Amount.ToString("0,0.00", Culture)}")
            </MudText>
        </MudTd>
        <MudTd DataLabel="Date">@(((DateTime)context.Date!).ToString("d", _culture))</MudTd>
        <MudTd DataLabel="Category">@context.Category.Name</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="Delete" Class="mud-table-cell-align-right mud-typography-nowrap">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                           OnClick="async() => await DeleteTransactionAsync(context)" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Amount">
            <MudNumericField @bind-Value="@context.Amount" Required />
        </MudTd>
        <MudTd DataLabel="Date">
            <MudDatePicker Required Culture="_culture" AdornmentColor="Color.Primary" @bind-Date="@context.Date" />
        </MudTd>
        <MudTd DataLabel="Category">
            <CategoriesDropdown Categories="_categories" @bind-SelectedCategory="context.Category" />
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required />
        </MudTd>
        <MudTd DataLabel="Note">
            <MudTextField Lines="2" @bind-Value="@context.Note" />
        </MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
 </MudTable>

 @code {
    private bool _loadingData = false;
    private CultureInfo _culture;
    private TransactionWithCategory _selectedTransaction;
    private TransactionWithCategory _transactionBeforeEdit;
    private List<TransactionWithCategory> _transactions;
    private List<CategoryDTO> _categories;

    private TableGroupDefinition<TransactionWithCategory> _groupDefinition = new()
        {
            GroupName = "Day",
            Indentation = false,
            Expandable = false,
            Selector = (t) => t.Date
        };

    [Parameter] public EventCallback<TransactionWithCategory> OnDeleteTransaction { get; set; }

    [Parameter] public Func<TransactionWithCategory, Task> UpdateTransactionAsync { get; set; }
    [Parameter] public Func<TransactionWithCategory, Task> DeleteTransactionAsync { get; set; }
    [Parameter] public CultureInfo? Culture { get; set; } = null;
    [Parameter] public List<TransactionWithCategory> Transactions { get => _transactions; set => _transactions = value; }
    [Parameter] public List<CategoryDTO> Categories { get => _categories; set => _categories = value; }

    protected override void OnInitialized()
    {
        _categories = new()
    {
        new CategoryDTO { Id=1, Name="Test_category_name_1", IsIncome=true, WalletId=1 },
        new CategoryDTO { Id=2, Name="Test_category_name_2", IsIncome=false, WalletId=1 },
    };

        _transactions = new()
    {
        new TransactionWithCategory { Id=1, Date=DateTime.Today, Amount=150000, Name="Test_name_1", Note="Test_note_1", Category=_categories[0] },
        new TransactionWithCategory { Id=2, Date=DateTime.Today, Amount=1000, Name="Test_name_2", Note="Test_note_2", Category=_categories[1] },
        new TransactionWithCategory { Id=3, Date=DateTime.Today, Amount=1000, Name="Test_name_3", Note="Test_note_3", Category=_categories[1] },
        new TransactionWithCategory { Id=4, Date=DateTime.Today, Amount=105000, Name="Test_name_4", Note="Test_note_4", Category=_categories[0] },
        new TransactionWithCategory { Id=5, Date=DateTime.Today.AddDays(-1), Amount=10000, Name="Test_name_5", Note="Test_note_5", Category=_categories[0] },
        new TransactionWithCategory { Id=6, Date=DateTime.Today.AddDays(-1), Amount=1000, Name="Test_name_6", Note="Test_note_6", Category=_categories[0] },
        new TransactionWithCategory { Id=7, Date=DateTime.Today.AddDays(-4), Amount=11000, Name="Test_name_7", Note="Test_note_7", Category=_categories[1] },
        new TransactionWithCategory { Id=8, Date=DateTime.Today.AddDays(-4), Amount=12000, Name="Test_name_8", Note="Test_note_8", Category=_categories[0] },
        new TransactionWithCategory { Id=9, Date=DateTime.Today.AddDays(-30), Amount=10400, Name="Test_name_9", Note="Test_note_9", Category=_categories[1] },
        new TransactionWithCategory { Id=10, Date=DateTime.Today.AddDays(-25), Amount=1001, Name="Test Test TestTestTest (50 chars include) testtest", Note="Test Test Test TestTest (1000 chars include) test test-test test-test/test test test-test testtest test-test test-test/test test test-test test-test/test test test-test test-test/test test test-test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/testtesttest test-test test-test/test testtest test-test test-test/testtesttest test-test test-test/testtesttest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-test test-test/test testtest test-testtest",
        Category=_categories[1] },
    };



        base.OnInitialized();
    }


    protected override void OnParametersSet()
    {
        _culture = Culture ?? CultureInfo.CurrentCulture ?? CultureInfo.InvariantCulture;

        base.OnParametersSet();
    }

    private void BackupTransaction(object item)
    {
        _transactionBeforeEdit = new()
            {
                Id = ((TransactionWithCategory)item).Id,
                Name = ((TransactionWithCategory)item).Name,
                Note = ((TransactionWithCategory)item).Note,
                Amount = ((TransactionWithCategory)item).Amount,
                Date = ((TransactionWithCategory)item).Date,
                Category = ((TransactionWithCategory)item).Category,
            };
    }

    private void ResetTransactionToBackupValues(object item)
    {
        ((TransactionWithCategory)item).Id = _transactionBeforeEdit.Id;
        ((TransactionWithCategory)item).Name = _transactionBeforeEdit.Name;
        ((TransactionWithCategory)item).Note = _transactionBeforeEdit.Note;
        ((TransactionWithCategory)item).Amount = _transactionBeforeEdit.Amount;
        ((TransactionWithCategory)item).Date = _transactionBeforeEdit.Date;
        ((TransactionWithCategory)item).Category = _transactionBeforeEdit.Category;
    }
}
